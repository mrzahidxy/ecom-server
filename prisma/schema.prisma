generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  password               String
  role                   Role       @default(USER)
  createdAt              DateTime   @default(now())
  updateAt               DateTime   @updatedAt
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  Address                Address[]
  CartItem               CartItem[]
  Order                  Order[]

  @@map("users")
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  price            Decimal
  tags             String
  createdAt        DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  image            String?
  PromotionProduct PromotionProduct[]
  CartItem         CartItem[]
  OrderProduct     OrderProduct[]

  @@map("products")
}

model Address {
  id         Int      @id @default(autoincrement())
  country    String
  state      String
  city       String
  postalCode Int
  address    String
  userId     Int
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("cart_items")
}

model Order {
  id         Int              @id @default(autoincrement())
  userId     Int
  netAmount  Decimal
  address    String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  status     OrderEventStatus @default(PENDING)
  OrderEvent OrderEvent[]
  products   OrderProduct[]
  user       User             @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  order     Order            @relation(fields: [orderId], references: [id])
}


model Promotion {
  id        Int                @id @default(autoincrement())
  title     String
  startDate DateTime
  endDate   DateTime
  code      String             @unique
  type      PromotionType
  discount  Decimal?
  slabs     Json?
  createdAt DateTime           @default(now())
  updateAt  DateTime           @updatedAt
  isActive  Boolean            @default(false)
  products  PromotionProduct[]
}

model PromotionProduct {
  id          Int       @id @default(autoincrement())
  productId   Int
  promotionId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  product     Product   @relation(fields: [productId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  CANCELLED
}

enum PromotionType {
  PERCENTAGE
  FIXED
  WEIGHTED
}


model heartbeat_logs {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamp(6)
}
